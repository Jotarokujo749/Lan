from flask import Flask, request, jsonify
from flask_cors import CORS
from bs4 import BeautifulSoup
from playwright.sync_api import sync_playwright
import time

app = Flask(__name__)
CORS(app)

def get_google_links(query, max_links=5):
    from urllib.parse import quote
    url = f"https://www.google.com/search?q={quote(query)}&hl=fr"
    with sync_playwright() as p:
        browser = p.chromium.launch(headless=True)
        page = browser.new_page()
        page.goto(url, timeout=60000)
        links = []
        for a in page.query_selector_all("a"):
            href = a.get_attribute("href")
            if href and "/url?q=" in href and "google.com" not in href:
                real = href.split("/url?q=")[1].split("&")[0]
                if real not in links:
                    links.append(real)
            if len(links) >= max_links:
                break
        browser.close()
    return links

def extract_with_browser(url):
    try:
        with sync_playwright() as p:
            browser = p.chromium.launch(headless=True)
            page = browser.new_page()
            page.goto(url, timeout=15000)
            content = page.content()
            soup = BeautifulSoup(content, "html.parser")
            browser.close()

        for tag in soup(["script", "style", "nav", "header", "footer", "aside"]):
            tag.decompose()

        paras = soup.find_all(["p", "div", "span"])
        for p in paras:
            txt = p.get_text(strip=True)
            if 50 < len(txt) < 500 and any(word in txt.lower() for word in [" est ", " sont ", "désigne", "signifie", "fonction", "représente", "action", "but", "permet"]):
                return txt
        return None
    except:
        return None

@app.route("/zamasu", methods=["POST"])
def zamasu():
    data = request.get_json()
    question = data.get("question", "")
    if not question:
        return jsonify({"response": "Aucune question reçue."})

    links = get_google_links(question)
    fragments = []

    for url in links:
        para = extract_with_browser(url)
        if para:
            fragments.append(para)
        time.sleep(1)

    if not fragments:
        return jsonify({"response": "Je n’ai trouvé aucun contenu utile visible sur les sites."})

    result = " ".join(list(dict.fromkeys(fragments[:3]))) + "."
    return jsonify({"response": result})

if __name__ == "__main__":
    app.run(port=5007)
