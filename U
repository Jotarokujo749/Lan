import requests
from bs4 import BeautifulSoup
from flask import Flask, request, jsonify
from flask_cors import CORS
import time

app = Flask(__name__)
CORS(app)

HEADERS = {
    "User-Agent": "Mozilla/5.0"
}

# Étape 1 : Requête Google
def get_google_links(query, max_links=5):
    url = f"https://www.google.com/search?q={query}&hl=fr"
    res = requests.get(url, headers=HEADERS)
    soup = BeautifulSoup(res.text, "html.parser")
    links = []
    for a in soup.select("a"):
        href = a.get("href")
        if href and "/url?q=" in href:
            real_link = href.split("/url?q=")[1].split("&")[0]
            if "google" not in real_link and real_link not in links:
                links.append(real_link)
        if len(links) >= max_links:
            break
    return links

# Étape 2 : Extraction des paragraphes utiles
def extract_useful_paragraphs(url):
    try:
        res = requests.get(url, headers=HEADERS, timeout=5)
        soup = BeautifulSoup(res.text, "html.parser")
        for tag in soup(["script", "style", "nav", "header", "footer", "aside", "noscript"]):
            tag.decompose()
        paras = soup.find_all("p")
        for p in paras:
            text = p.get_text(strip=True)
            if 50 < len(text) < 400 and any(word in text.lower() for word in ["est", "sont", "signifie", "permet", "fonction", "sert", "représente"]):
                return text
        return None
    except:
        return None

# Étape 3 : Route API
@app.route("/zamasu", methods=["POST"])
def zamasu_response():
    data = request.get_json()
    question = data.get("question", "")
    if not question:
        return jsonify({"error": "Aucune question reçue."}), 400

    links = get_google_links(question)
    fragments = []

    for url in links:
        para = extract_useful_paragraphs(url)
        if para:
            fragments.append(para)
        time.sleep(1)  # pour éviter le blocage IP

    if not fragments:
        return jsonify({"response": "Je n'ai trouvé aucune réponse claire sur le web."})

    # Fusion propre
    unique_fragments = list(dict.fromkeys(fragments))  # éviter les doublons
    phrase = " ".join(unique_fragments[:3]) + "."
    return jsonify({"response": phrase})

if __name__ == "__main__":
    app.run(port=5005)
